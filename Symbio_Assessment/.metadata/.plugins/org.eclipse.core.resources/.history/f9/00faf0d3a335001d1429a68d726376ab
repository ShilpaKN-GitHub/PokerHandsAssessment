import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

class Hand {
	private Card[] hand;
	private String name;

	public Hand() {
		hand = null;
		name = "";
	}

	public Hand(String handString, String name) {
		String[] cards = handString.split(" ");
		hand = new Card[cards.length];

		for (int i = 0; i < hand.length; i++) {
			hand[i] = new Card(cards[i]);
		}

		Arrays.sort(hand);
		this.name = name;
	}

	public Card[] getHand() {
		return this.hand;
	}

	public String getName() {
		return this.name;
	}

	private static boolean isPair(Card[] hand) {
		int card1 = hand[0].getValue();
		int card2 = hand[1].getValue();
		int card3 = hand[2].getValue();
		int card4 = hand[3].getValue();
		int card5 = hand[4].getValue();

		return ((card1 == card2 && card2 != card3) || (card2 == card3 && card3 != card4 && card2 != card1)
				|| (card3 == card4 && card4 != card5 && card3 != card2) || (card4 == card5 && card4 != card3));
	}

	private static boolean isTwoPair(Card[] hand) {
		int card1 = hand[0].getValue();
		int card2 = hand[1].getValue();
		int card3 = hand[2].getValue();
		int card4 = hand[3].getValue();
		int card5 = hand[4].getValue();

		return ((card1 == card2 && card3 == card4 && card2 != card3 && card4 != card5)
				|| (card1 != card2 && card2 == card3 && card3 != card4 && card4 == card5));
	}

	private static boolean isThreeOfAKind(Card[] hand) {
		int card1 = hand[0].getValue();
		int card2 = hand[1].getValue();
		int card3 = hand[2].getValue();
		int card4 = hand[3].getValue();
		int card5 = hand[4].getValue();

		return (card1 == card3 || card2 == card4 || card3 == card5);
	}

	private static boolean isStraight(Card[] hand) {
		return hand[4].getValue() - hand[0].getValue() == 4;
	}

	private static boolean isFlush(Card[] hand) {

		for (int i = 0; i < hand.length - 1; i++) {
			if (hand[i + 1].getSuit() != hand[i].getSuit()) {
				return false;
			}
		}
		return true;
	}

	private static boolean isFullHouse(Card[] hand) {
		int card1 = hand[0].getValue();
		int card2 = hand[1].getValue();
		int card3 = hand[2].getValue();
		int card4 = hand[3].getValue();
		int card5 = hand[4].getValue();

		return ((card1 == card2 && card2 != card3 && card3 == card5)
				|| (card1 == card3 && card3 != card4 && card4 == card5));
	}

	private static boolean isFourOfAKind(Card[] hand) {
		return (hand[0].getValue() == hand[3].getValue() || hand[1].getValue() == hand[4].getValue());
	}

	private static boolean isStraightFlush(Card[] hand) {
		return isStraight(hand) && isFlush(hand);
	}

	private static boolean isRoyalFlush(Card[] hand) {
		int card1 = hand[0].getSuit();
		int card2 = hand[1].getSuit();
		int card3 = hand[2].getSuit();
		int card4 = hand[3].getSuit();
		int card5 = hand[4].getSuit();

		int Ten = (int) 'T';
		int Jack = (int) 'J';
		int Queen = (int) 'Q';
		int King = (int) 'K';
		int Ace = (int) 'A';

		int[] cards = { card1, card2, card3, card4, card5 };
		Arrays.sort(cards);

		boolean isRoyal = cards[0] == Ace && cards[1] == Jack && cards[2] == King && cards[3] == Queen
				&& cards[4] == Ten;

		return isRoyal && isFlush(hand);
	}

	private HandRank getHandRank() {
		Card[] tempHand = this.getHand();

		if (isStraightFlush(tempHand)) {
			return HandRank.STRAIGHT_FLUSH;
		} else if (isFourOfAKind(tempHand)) {
			return HandRank.FOUR_OF_A_KIND;
		} else if (isFullHouse(tempHand)) {
			return HandRank.FULL_HOUSE;
		} else if (isFlush(tempHand)) {
			return HandRank.FLUSH;
		} else if (isStraight(tempHand)) {
			return HandRank.STRAIGHT;
		} else if (isThreeOfAKind(tempHand)) {
			return HandRank.THREE_OF_A_KIND;
		} else if (isTwoPair(tempHand)) {
			return HandRank.TWO_PAIR;
		} else if (isPair(tempHand)) {
			return HandRank.PAIR;
		} else if (isRoyalFlush(tempHand)) {
			return HandRank.ROYAL_FLUSH;
		} else {
			return HandRank.HIGH_CARD;
		}
	}

	private int compareHighCard(Hand hand1, Hand hand2) {
		Card[] hand1Cards = hand1.getHand();
		Card[] hand2Cards = hand2.getHand();
		return hand1Cards[hand1Cards.length - 1].compareTo(hand2Cards[hand2Cards.length - 1]);
	}

	private int compareRecursiveHighCard(Hand hand1, Hand hand2) {
		Card[] hand1Cards = hand1.getHand();
		Card[] hand2Cards = hand2.getHand();

		int current = hand1Cards.length - 1;
		int cmp = 0;
		while (current >= 0) {
			cmp = hand1Cards[current].compareTo(hand2Cards[current]);
			if (cmp != 0) {
				break;
			}
			current--;
		}
		return cmp;
	}

	private Card compareFourOfAKind(Hand tempHand) {
		Card[] tempCards = tempHand.getHand();
		if (tempCards[0] == tempCards[3]) {
			return tempCards[0];
		} else if (tempCards[1] == tempCards[4]) {
			return tempCards[1];
		}
		return null;
	}

	private Card compareThreeOfAKind(Hand tempHand) {
		Card[] tempCards = tempHand.getHand();
		if (tempCards[0] == tempCards[2]) {
			return tempCards[0];
		} else if (tempCards[1] == tempCards[3]) {
			return tempCards[1];
		} else if (tempCards[2] == tempCards[4]) {
			return tempCards[2];
		}
		return null;
	}

	private int compareTwoPair(Hand hand1, Hand hand2) {
		Card[] hand1Cards = hand1.getHand();
		int card1 = hand1Cards[0].getValue();
		int card2 = hand1Cards[1].getValue();
		int card3 = hand1Cards[2].getValue();
		int card4 = hand1Cards[3].getValue();
		int card5 = hand1Cards[4].getValue();

		Card hand1Bigger = null;
		Card hand1Smaller = null;
		Card hand1Remain = null;

		if (card1 == card2 && card3 == card4 && card2 != card3 && card4 != card5) {
			if (card1 > card3) {
				hand1Bigger = hand1Cards[0];
				hand1Smaller = hand1Cards[2];
				hand1Remain = hand1Cards[4];
			} else {
				hand1Bigger = hand1Cards[2];
				hand1Smaller = hand1Cards[0];
				hand1Remain = hand1Cards[4];
			}
		}
		if (card1 != card2 && card2 == card3 && card3 != card4 && card4 == card5) {
			if (card2 > card4) {
				hand1Bigger = hand1Cards[1];
				hand1Smaller = hand1Cards[3];
				hand1Remain = hand1Cards[0];
			} else {
				hand1Bigger = hand1Cards[3];
				hand1Smaller = hand1Cards[1];
				hand1Remain = hand1Cards[0];
			}
		}

		Card[] hand2Cards = hand1.getHand();
		int card11 = hand2Cards[0].getValue();
		int card22 = hand2Cards[1].getValue();
		int card33 = hand2Cards[2].getValue();
		int card44 = hand2Cards[3].getValue();
		int card55 = hand2Cards[4].getValue();

		Card hand2Bigger = null;
		Card hand2Smaller = null;
		Card hand2Remain = null;

		if (card11 == card22 && card33 == card44 && card22 != card33 && card44 != card55) {
			if (card11 > card33) {
				hand2Bigger = hand2Cards[0];
				hand2Smaller = hand2Cards[2];
				hand2Remain = hand2Cards[4];
			} else {
				hand2Bigger = hand2Cards[2];
				hand2Smaller = hand2Cards[0];
				hand2Remain = hand2Cards[4];
			}
		}
		if (card11 != card22 && card22 == card33 && card33 != card44 && card44 == card55) {
			if (card22 > card44) {
				hand2Bigger = hand2Cards[1];
				hand2Smaller = hand2Cards[3];
				hand2Remain = hand2Cards[0];
			} else {
				hand2Bigger = hand2Cards[3];
				hand2Smaller = hand2Cards[1];
				hand2Remain = hand2Cards[0];
			}
		}

		if (hand1Bigger.compareTo(hand2Bigger) != 0) {
			return hand1Bigger.compareTo(hand2Bigger);
		} else if (hand1Smaller.compareTo(hand2Smaller) != 0) {
			return hand1Smaller.compareTo(hand2Smaller);
		} else {
			return hand1Remain.compareTo(hand2Remain);
		}
	}

	private int comparePair(Hand hand1, Hand hand2) {
		Card[] hand1Cards = hand1.getHand();
		Card[] hand2Cards = hand2.getHand();

		Set<Card> hand1Set = new HashSet<Card>();
		Set<Card> hand2Set = new HashSet<Card>();

		Card hand1PairCard = null;
		Card hand2PairCard = null;

		for (int i = 0; i < hand1Cards.length; i++) {
			if (!hand1Set.contains(hand1Cards[i])) {
				hand1Set.add(hand1Cards[i]);
			} else {
				hand1PairCard = hand1Cards[i];
			}
		}

		for (int i = 0; i < hand2Cards.length; i++) {
			if (!hand2Set.contains(hand2Cards[i])) {
				hand2Set.add(hand2Cards[i]);
			} else {
				hand2PairCard = hand2Cards[i];
			}
		}

		if (hand1PairCard.compareTo(hand2PairCard) != 0) {
			return hand1PairCard.compareTo(hand2PairCard);
		} else {
			while (!hand1Set.isEmpty() && !hand2Set.isEmpty()) {
				Card tempHand1Max = Collections.max(hand1Set);
				Card tempHand2Max = Collections.max(hand2Set);

				if (tempHand1Max.compareTo(tempHand2Max) != 0) {
					return tempHand1Max.compareTo(tempHand2Max);
				}

				hand1Set.remove(tempHand1Max);
				hand2Set.remove(tempHand2Max);
			}
		}
		return -10000;
	}

	String getWinner(Hand hand1, Hand hand2) {
		HandRank hand1Rank = hand1.getHandRank();
		HandRank hand2Rank = hand2.getHandRank();

		int cmp = hand1Rank.compareValue(hand2Rank);
		if (cmp == 1) {
			return hand1.getName();
		} else if (cmp == -1) {
			return hand2.getName();
		} else if (cmp == 0) {
			switch (hand1Rank) {
			case STRAIGHT_FLUSH:
				cmp = compareHighCard(hand1, hand2);
				break;
			case FOUR_OF_A_KIND:
				cmp = compareFourOfAKind(hand1).compareTo(compareFourOfAKind(hand2));
				break;
			case FULL_HOUSE:
				cmp = compareThreeOfAKind(hand1).compareTo(compareThreeOfAKind(hand2));
				break;
			case FLUSH:
				cmp = compareRecursiveHighCard(hand1, hand2);
				break;
			case STRAIGHT:
				cmp = compareHighCard(hand1, hand2);
				break;
			case THREE_OF_A_KIND:
				cmp = compareThreeOfAKind(hand1).compareTo(compareThreeOfAKind(hand2));
				break;
			case TWO_PAIR:
				cmp = compareTwoPair(hand1, hand2);
				break;
			case PAIR:
				cmp = comparePair(hand1, hand2);
				break;
			case HIGH_CARD:
				cmp = compareRecursiveHighCard(hand1, hand2);
				break;
			case ROYAL_FLUSH:
				cmp = compareHighCard(hand1, hand2);
				break;
			}
			return cmp == 1 ? hand1.getName() : cmp == -1 ? hand2.getName() : cmp == 2 ? "Unkown." : "Tie.";
		} else {
			return "Unkown";
		}
	}
}